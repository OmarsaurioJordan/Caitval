<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// datos del bloque
estado = ms_construyendo;
tipo = mi_casa;
vida = 1;
guarecidos = 0;
planeacion = 0; // 1 si se desea subir de nivel
generar = 0;
estilo = irandom(1);

// temporizadores
reloj_creademuele = mq_creademuele * m_seg;
reloj_anima = random(m_seg);
reloj_humo = random(m_seg);
reloj_arregla = 0;
reloj_accion = random(m_seg);

depth = -y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch estado {
    case ms_construyendo:
        reloj_creademuele -= min(delta_time, m_dtlim);
        if reloj_creademuele &lt;= 0 {
            reloj_creademuele = mq_creademuele * m_seg;
            estado = ms_normal; } break;
    case ms_normal:
        // botar humo si herido
        if vida == 1 and (tipo == mi_edificio or tipo == mi_molino or
                tipo == mi_torre or tipo == mi_planetario) {
            reloj_humo -= min(delta_time, m_dtlim);
            if reloj_humo &lt;= 0 {
                reloj_humo = (mu_anima + random(mu_anima)) * m_seg * 4;
                if random(1) &lt; m_soniazar * 0.5 {
                    audio_play_sound(a_humo, 1, false); }
                instance_create(x - 40 + random(80), y + 1, o_explosion); } }
        // curar vida tras un tiempo
        if reloj_arregla != 0 {
            reloj_arregla -= min(delta_time, m_dtlim);
            if reloj_arregla &lt;= 0 {
                reloj_arregla = 0;
                vida++; } }
        // hacer accion especial del edificio
        reloj_accion -= min(delta_time, m_dtlim);
        if reloj_accion &lt;= 0 {
            reloj_accion = m_accionedif * m_seg;
            if random(1) &lt; m_soniazar * 0.25 {
                if tipo == mi_arbol {
                    audio_play_sound(a_pajaros, 2, false); }
                else if tipo == mi_molino {
                    audio_play_sound(a_molino, 4, false); } }
            s_accion_edificio(tipo, x, y); }
        // animaciones de molino y planetario
        if tipo == mi_planetario {
            reloj_anima -= min(delta_time, m_dtlim);
            if reloj_anima &lt;= 0 {
                reloj_anima = mq_anima_planetario * m_seg; } }
        else if tipo == mi_molino {
            reloj_anima -= min(delta_time, m_dtlim);
            if reloj_anima &lt;= 0 {
                reloj_anima = mq_anima_molino * m_seg; } }
        break;
    case ms_remodelando:
        reloj_creademuele -= min(delta_time, m_dtlim);
        if reloj_creademuele &lt;= 0 {
            reloj_creademuele = mq_creademuele * m_seg;
            vida++;
            switch tipo {
                case mi_casa: tipo = mi_edificio; break;
                case mi_pozo: tipo = mi_molino; break;
                case mi_templo: tipo = mi_planetario; break;
                case mi_fuerte: tipo = mi_torre; break; }
            estado = ms_construyendo; } break;
    case ms_muerto:
        reloj_creademuele -= min(delta_time, m_dtlim);
        if reloj_creademuele &lt;= -m_escombro * m_seg {
            instance_destroy(); } break; }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if reloj_creademuele &gt; 0 {
    var paso = 0;
    if estado == ms_muerto or estado == ms_remodelando {
        paso = 5 - ceil(reloj_creademuele / (0.2 * mq_creademuele * m_seg)); }
    else if estado == ms_construyendo {
        paso = ceil(reloj_creademuele / (0.2 * mq_creademuele * m_seg)) - 1; }
    switch tipo {
        case mi_arbol:
            if estado == ms_normal {
                draw_sprite(d_natural, 5 * estilo, x, y); }
            else {
                draw_sprite(d_natural, 5 * estilo + paso, x, y); }
            break;
        case mi_piedra:
            if estado == ms_normal {
                draw_sprite(d_natural, 10, x, y); }
            else {
                draw_sprite(d_natural, 10 + paso, x, y); }
            break;
        case mi_casa:
            if estado == ms_normal {
                if guarecidos &gt; 0 {
                    draw_sprite(d_casa, min(6, 4 + guarecidos), x, y); }
                else {
                    draw_sprite(d_casa, 0, x, y); }
                if planeacion == 1 {
                    draw_sprite(d_casa, 7, x, y); } }
            else {
                draw_sprite(d_casa, paso, x, y); }
            break;
        case mi_edificio:
            if estado == ms_normal {
                if guarecidos &gt; 0 {
                    draw_sprite(d_edificio, min(8, 4 + guarecidos), x, y); }
                else {
                    draw_sprite(d_edificio, 0, x, y); } }
            else {
                draw_sprite(d_edificio, paso, x, y); }
            break;
        case mi_pozo:
            if estado == ms_normal {
                draw_sprite(d_pozo, 0, x, y);
                if planeacion == 1 {
                    draw_sprite(d_pozo, 5, x, y); } }
            else {
                draw_sprite(d_pozo, paso, x, y); }
            break;
        case mi_molino:
            if estado == ms_normal {
                paso = ceil(reloj_anima / (0.125 * mq_anima_molino * m_seg));
                draw_sprite(d_molino, 4 + paso, x, y); }
            else {
                draw_sprite(d_molino, paso, x, y); }
            break;
        case mi_fuerte:
            if estado == ms_normal {
                if guarecidos &gt; 0 {
                    draw_sprite(d_fuerte, min(7, 4 + guarecidos), x, y); }
                else {
                    draw_sprite(d_fuerte, 0, x, y); }
                if planeacion == 1 {
                    draw_sprite(d_fuerte, 8, x, y); } }
            else {
                draw_sprite(d_fuerte, paso, x, y); }
            break;
        case mi_torre:
            if estado == ms_normal {
                if guarecidos &gt; 0 {
                    draw_sprite(d_torre, min(7, 4 + guarecidos), x, y); }
                else {
                    draw_sprite(d_torre, 0, x, y); } }
            else {
                draw_sprite(d_torre, paso, x, y); }
            break;
        case mi_templo:
            if estado == ms_normal {
                draw_sprite(d_templo, 0, x, y);
                if planeacion == 1 {
                    draw_sprite(d_templo, 5, x, y); } }
            else {
                draw_sprite(d_templo, paso, x, y); }
            break;
        case mi_planetario:
            if estado == ms_normal {
                paso = ceil(reloj_anima / (0.0625 * mq_anima_planetario * m_seg));
                draw_sprite(d_planetario, 4 + paso, x, y); }
            else {
                draw_sprite(d_planetario, paso, x, y); }
            break; }
    
    if instance_exists(o_construir) {
        if o_construir.cercano == id {
            if o_construir.herramienta == mj_demoler {
                draw_sprite(d_ciclo, 1, x, y - 160); }
            else {
                draw_sprite(d_ciclo, 3, x, y - 160); } } } }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
