<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// coordenadas GUI
ww = 1024 * 2;
hh = 682 * 2;
display_set_gui_size(ww, hh);

// relojes
reloj_dobleclic = 0;
reloj_espera = 0;
reloj_parpadeo = 0;
reloj_anima = 0;
reloj_cambio = m_cambio_arte * m_seg;
tipo = irandom(8);

// informacion dinamica de la GUI
sombreado = -1;
seleccion = -1;
loggg = "";
tooltip = "";
s_archivos(id);
hand_con = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// relojes

if reloj_dobleclic != 0 {
    reloj_dobleclic -= min(delta_time, m_dtlim);
    if reloj_dobleclic &lt; 0 {
        reloj_dobleclic = 0; } }

if reloj_espera != 0 {
    reloj_espera -= min(delta_time, m_dtlim);
    if reloj_espera &lt; 0 {
        reloj_espera = 0;
        // se iniciara la partida
        if string_pos("Con", loggg) == 1 {
            ini_open("configuracion.ini");
            ini_write_string("config", "servidorx", o_control.servidor);
            ini_write_string("config", "ultimo", o_control.nombre_jugador);
            ini_close();
            instance_create(0, 0, o_turno);
            background_visible[2] = false;
            if arch_actual == 0 {
                s_creabioma();
                s_savegame();
                s_history("Crea la partida"); }
            else {
                s_opengame();
                s_history("Entra a la partida"); }
            s_actualitodo();
            o_control.reloj_atencion = m_seg;
            o_control.alarm[0] = 3;
            if file_exists(o_control.nombre_jugador + ".txt") {
                file_delete(o_control.nombre_jugador + ".txt"); }
            instance_destroy();
            exit; } } }

reloj_cambio -= min(delta_time, m_dtlim);
if reloj_cambio &lt;= 0 {
    reloj_cambio = m_cambio_arte * m_seg;
    var ant = tipo;
    tipo = irandom(8);
    if tipo == mg_molino or tipo == mg_planetario or tipo == mg_unidad {
        reloj_cambio += random(m_cambio_arte * m_seg);}
    if ant != tipo {
        reloj_anima = 0; } }

reloj_parpadeo -= min(delta_time, m_dtlim);
if reloj_parpadeo &lt;= 0 {
    reloj_parpadeo = m_parpadeo * m_seg; }

if tipo == mg_planetario {
    reloj_anima -= min(delta_time, m_dtlim);
    if reloj_anima &lt;= 0 {
        reloj_anima = mq_anima_planetario * m_seg; } }
else if tipo == mg_molino {
    reloj_anima -= min(delta_time, m_dtlim);
    if reloj_anima &lt;= 0 {
        reloj_anima = mq_anima_molino * m_seg; } }
else if tipo == mg_unidad {
    reloj_anima -= min(delta_time, m_dtlim);
    if reloj_anima &lt;= 0 {
        reloj_anima = mu_anima * m_seg * 1.5; } }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// boton sombreado

sombreado = -1;
if reloj_espera == 0 {
var mox = mouse_x * 0.5;
var moy = mouse_y * 0.5;
if point_distance(mox, moy, ww - 100, 100) &lt; m_radioboton {
    sombreado = mm_cerrar; }
else if point_distance(mox, moy, ww - 200, 100) &lt; m_radioboton {
    sombreado = mm_full; }
else if point_distance(mox, moy, ww - 300, 100) &lt; m_radioboton {
    sombreado = mm_sonido; }
else if point_distance(mox, moy, ww - 400, 100) &lt; m_radioboton {
    sombreado = mm_foto; }
else if point_distance(mox, moy, 100, 100) &lt; m_radioboton * 1.5 {
    sombreado = mm_servidor; }
else if point_distance(mox, moy, 250, 100) &lt; m_radioboton {
    sombreado = mm_idioma; }
else if point_distance(mox, moy, ww * 0.05 + 800, hh * 0.26 + 100) &lt; m_radioboton {
    sombreado = mm_web; }
else if point_distance(mox, moy, ww - 550, 100) &lt; m_radioboton * 1.3 {
    sombreado = mm_univalle; }
else if point_distance(mox, moy, ww - 100, hh - 100) &lt; m_radioboton * 3 {
    sombreado = mm_omarsaurio; }
else if point_distance(mox, moy, ww * 0.05 + 750, hh * 0.42 + 580) &lt; m_radioboton * 1.5 {
    sombreado = mm_play; }
else if mox &gt; ww * 0.05 + 400 - m_radioboton * 10 and
        mox &lt; ww * 0.05 + 400 + m_radioboton * 10 and
        moy &gt; hh * 0.26 + 100 - m_radioboton and
        moy &lt; hh * 0.26 + 100 + m_radioboton {
    sombreado = mm_ip; }
if arch_actual == 0 {
    if mox &gt; ww * 0.05 + 400 - m_radioboton * 10 and
            mox &lt; ww * 0.05 + 400 + m_radioboton * 10 and
            moy &gt; hh * 0.42 + 100 - m_radioboton and
            moy &lt; hh * 0.42 + 100 + m_radioboton {
        sombreado = mm_nombre; }
    else if point_distance(mox, moy, ww * 0.05 + 250, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_ava_rand; }
    else if point_distance(mox, moy, ww * 0.05 + 350, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_open; }
    else if point_distance(mox, moy, ww * 0.05 + 100, hh * 0.42 + 480) &lt; m_radioboton {
        sombreado = mm_ava_iz; }
    else if point_distance(mox, moy, ww * 0.05 + 300, hh * 0.42 + 480) &lt; m_radioboton {
        sombreado = mm_ava_de; }
    else if arch_total &gt; 0 {
        if point_distance(mox, moy, ww * 0.05 + 150, hh * 0.42 + 180) &lt; m_radioboton {
            sombreado = mm_archi_iz; }
        else if point_distance(mox, moy, ww * 0.05 + 750, hh * 0.42 + 180) &lt; m_radioboton {
            sombreado = mm_archi_de; } } }
else {
    if point_distance(mox, moy, ww * 0.05 + 150, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_iz; }
    else if point_distance(mox, moy, ww * 0.05 + 750, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_de; }
    else if point_distance(mox, moy, ww * 0.05 + 450, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_save; }
    else if point_distance(mox, moy, ww * 0.05 + 350, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_open; }
    else if point_distance(mox, moy, ww * 0.05 + 550, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_delete; }
    else if point_distance(mox, moy, ww * 0.05 + 250, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_new; }
    else if point_distance(mox, moy, ww * 0.05 + 650, hh * 0.42 + 180) &lt; m_radioboton {
        sombreado = mm_archi_history; } } }
tooltip = sd_discurso(mm_mm + sombreado);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// comandos escritura

if reloj_espera == 0 {
    if keyboard_check(vk_control) {
        if keyboard_check_direct(ord('C')) {
            if seleccion == mm_ip {
                clipboard_set_text(o_control.servidor); }
            else if seleccion == mm_nombre {
                clipboard_set_text(o_control.nombre_jugador); } }
        else if keyboard_check_direct(ord('V')) {
            if seleccion == mm_ip {
                o_control.servidor = clipboard_get_text();
                if string_length(o_control.servidor) &gt; m_len_ip {
                    o_control.servidor = string_copy(o_control.servidor, 1, m_len_ip); } }
            else if seleccion == mm_nombre {
                o_control.nombre_jugador = s_letrasok(clipboard_get_text(), false, m_len_nombre); } } }
    else if keyboard_check(vk_anykey) {
        if seleccion == mm_ip {
            if string_length(keyboard_string) &gt; m_len_ip {
                keyboard_string = string_copy(keyboard_string, 1, m_len_ip); }
            o_control.servidor = keyboard_string; }
        else if seleccion == mm_nombre {
            o_control.nombre_jugador = s_escribe(o_control.nombre_jugador, m_len_nombre, false); } } }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// comandos clic

if mouse_check_button_pressed(mb_left) and reloj_espera == 0 {
    seleccion = -1;
    switch sombreado {
        case mm_cerrar:
            if reloj_dobleclic == 0 {
                audio_play_sound(am_advertencia, 99, false);
                reloj_dobleclic = m_dobleclic * m_seg; }
            else {
                game_end();
                exit; }
            break;
        
        case mm_full:
            audio_play_sound(am_boton, 99, false);
            window_set_fullscreen(!window_get_fullscreen());
            break;
        
        case mm_sonido:
            o_control.sonido++;
            if o_control.sonido &gt;= 3 {
                o_control.sonido = 0; }
            s_set_sonido();
            audio_play_sound(am_boton, 99, false);
            break;
        
        case mm_foto:
            screen_save("foto.png");
            if window_get_fullscreen() {
                audio_play_sound(am_advertencia, 99, false);
                window_set_fullscreen(false); }
            else {
                var aux = get_save_filename("PNG|*.png", "screenshot");
                if aux != "" {
                    audio_play_sound(am_foto, 99, false);
                    screen_save(aux); } }
            break;
        
        case mm_play:
            reloj_espera = mh_espera * m_seg;
            if os_is_network_connected() {
                o_control.micodigo = 0;
                if arch_actual == 0 {
                    if o_control.nombre_jugador == "" or
                            o_control.nombre_jugador == "configuracion" {
                        audio_play_sound(am_error, 99, false);
                        loggg = sd_discurso(8);
                        reloj_espera = m_seg; }
                    else {
                        o_control.micodigo = 1 + irandom(m_codigounico);
                        o_control.ciclo_edad = 1;
                        o_control.nombre_archivo = o_control.nombre_jugador + ".ini";
                        var na = 0;
                        while file_exists(o_control.nombre_archivo) {
                            o_control.nombre_archivo = o_control.nombre_jugador +
                                string(na) + ".ini";
                            na++; } } }
                else {
                    o_control.nombre_archivo = archivo[arch_actual, 1]; 
                    ini_open(o_control.nombre_archivo);
                    if o_control.version == ini_read_string("info", "version", "") {
                        o_control.micodigo = real(ini_read_string("data", "micodigo", "0"));
                        o_control.nombre_jugador = ini_read_string("data", "nombre_jugador", "");
                        o_control.ciclo_edad = real(ini_read_string("data", "ciclo_edad", "0"));
                        o_control.avatar = real(ini_read_string("data", "avatar", "0")); }
                    else {
                        audio_play_sound(am_error, 99, false);
                        loggg = sd_discurso(9);
                        reloj_espera = m_seg; }
                    ini_close(); }
                if o_control.micodigo != 0 {
                    hand_con = sh_envio_http(99, "", o_control.nombre_jugador,
                        o_control.micodigo, o_control.ciclo_edad, o_control.avatar,
                        o_control.version); } }
            else {
                audio_play_sound(am_error, 99, false);
                loggg = sd_discurso(7);
                reloj_espera = m_seg; }
            break;
        
        case mm_servidor:
            if window_get_fullscreen() {
                audio_play_sound(am_advertencia, 99, false);
                window_set_fullscreen(false); }
            else {
                var aux = get_save_filename("ZIP|*.zip", "CaitvalServerInfo");
                if aux != "" {
                    audio_play_sound(am_ok, 99, false);
                    file_copy("CaitvalServerInfo.zip", aux); } }
            break;
        
        case mm_ip:
            audio_play_sound(am_cambio, 99, false);
            keyboard_string = o_control.servidor;
            seleccion = mm_ip;
            break;
        
        case mm_web:
            audio_play_sound(am_boton, 99, false);
            o_control.servidor = "http://www.omwekiatl.xyz";
            keyboard_string = o_control.servidor;
            break;
        
        case mm_omarsaurio:
            audio_play_sound(am_boton, 99, false);
            url_open("https://linktr.ee/omwekiatl");
            break;
        
        case mm_univalle:
            audio_play_sound(am_boton, 99, false);
            url_open("https://www.univalle.edu.co");
            break;
        
        case mm_archi_iz:
            audio_play_sound(am_cambio, 99, false);
            arch_actual--;
            if arch_actual &lt; 0 {
                arch_actual = arch_total; }
            break;
        
        case mm_archi_de:
            audio_play_sound(am_cambio, 99, false);
            arch_actual++;
            if arch_actual &gt; arch_total {
                arch_actual = 0; }
            break;
        
        case mm_archi_save:
            if window_get_fullscreen() {
                audio_play_sound(am_advertencia, 99, false);
                window_set_fullscreen(false); }
            else {
                var aux = get_save_filename("INI|*.ini",
                    string_replace_all(archivo[arch_actual, 1], ".ini", ""));
                if aux != "" {
                    audio_play_sound(am_ok, 99, false);
                    file_copy(archivo[arch_actual, 1], aux); } }
            break;
        
        case mm_archi_open:
            if window_get_fullscreen() {
                audio_play_sound(am_advertencia, 99, false);
                window_set_fullscreen(false); }
            else {
                var aux = get_open_filename("INI|*.ini", "");
                if aux != "" {
                    audio_play_sound(am_ok, 99, false);
                    file_copy(aux, "_tmp_.ini");
                    var check = "";
                    ini_open("_tmp_.ini");
                    if o_control.version == ini_read_string("control", "version", "") and
                            !s_archiduplicado(ini_read_string("control", "nombre_jugador", ""), id) {
                        check = ini_read_string("control", "nombre_jugador", ""); }
                    ini_close();
                    if check != "" {
                        file_copy("_tmp_.ini", check + ".ini");
                        instance_create(0, 0, o_menu);
                        instance_destroy(); }
                    else {
                        loggg = sd_discurso(4); } } }
            break;
        
        case mm_archi_delete:
            if reloj_dobleclic == 0 {
                audio_play_sound(am_advertencia, 99, false);
                reloj_dobleclic = m_dobleclic * m_seg; }
            else {
                audio_play_sound(am_ok, 99, false);
                file_delete(archivo[arch_actual, 1]);
                instance_create(0, 0, o_menu);
                instance_destroy(); }
            break;
        
        case mm_archi_new:
            audio_play_sound(am_boton, 99, false);
            arch_actual = 0;
            o_control.nombre_jugador = "";
            o_control.avatar = irandom(m_avatares - 1);
            break;
        
        case mm_archi_history:
            if window_get_fullscreen() {
                audio_play_sound(am_advertencia, 99, false);
                window_set_fullscreen(false); }
            else {
                var aux = get_save_filename("TXT|*.txt",
                    string_replace_all(archivo[arch_actual, 1], ".ini", ""));
                if aux != "" {
                    audio_play_sound(am_ok, 99, false);
                    var txt = file_text_open_write("_tmp_.txt");
                    ini_open(archivo[arch_actual, 1]);
                    var t = 0;
                    while ini_key_exists("historial", "t" + string(t)) {
                        file_text_write_string(txt, ini_read_string("historial", "t" + string(t), ""));
                        file_text_writeln(txt);
                        t++; }
                    ini_close();
                    file_text_close(txt);
                    file_copy("_tmp_.txt", aux); } }
            break;
        
        case mm_ava_iz:
            audio_play_sound(am_cambio, 99, false);
            o_control.avatar--;
            if o_control.avatar &lt; 0 {
                o_control.avatar = m_avatares - 1; }
            break;
        
        case mm_ava_de:
            audio_play_sound(am_cambio, 99, false);
            o_control.avatar++;
            if o_control.avatar &gt;= m_avatares {
                o_control.avatar = 0; }
            break;
        
        case mm_ava_rand:
            audio_play_sound(am_cambio, 99, false);
            o_control.avatar = irandom(m_avatares - 1);
            break;
        
        case mm_nombre:
            audio_play_sound(am_cambio, 99, false);
            seleccion = mm_nombre;
            break;
        
        case mm_idioma:
            audio_play_sound(am_boton, 99, false);
            o_control.idioma++;
            if o_control.idioma &gt;= m_idiomas {
                o_control.idioma = 0; }
            break; } }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// play
if ds_map_find_value(async_load, "id") == hand_con {
    if ds_map_find_value(async_load, "status") == 0 {
        var aux = ds_map_find_value(async_load, "result");
        if string_count("|", aux) == 6 {
            var data = s_split(aux, "|", false);
            // si ocurre error
            if data[0] == "97" {
                audio_play_sound(am_error, 99, false);
                if data[3] == "0" {
                    loggg = sd_discurso(mm_error + real(data[3])) + data[6]; }
                else if data[3] == "1" {
                    loggg = sd_discurso(mm_error + real(data[3])) +
                        string_replace_all(data[6], "Version:", ""); }
                else {
                     loggg = sd_discurso(mm_error + real(data[3])); }
                reloj_espera = m_seg; }
            // si conexion adecuada
            else if data[0] == "96" and data[3] == "0" {
                audio_play_sound(am_ok, 99, false);
                var dg = s_split(data[2], ",", false);
                o_control.espro = 0;
                o_control.menor = 1;
                if is_array(dg) {
                    o_control.espro = real(dg[0]);
                    o_control.menor = real(dg[1]); }
                o_control.tiempo_ciclo = real(data[4]);
                loggg = sd_discurso(10) + string(((real(data[5]) / 60) / 60) / 24) + sd_discurso(11);
                reloj_espera = mh_espera * m_seg; }
            else {
                audio_play_sound(am_error, 99, false);
                loggg = sd_discurso(15); } }
        else {
            audio_play_sound(am_error, 99, false);
            loggg = sd_discurso(15); } } }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// titulo y version
draw_sprite(d_titulo, 0, ww * 0.5, hh * 0.05);
sd_set_texto(fa_left, fa_middle, d_letras_estilizadas);
if o_control.newversion {
    sd_texto(ww * 0.65, hh * 0.2, 1, "v " + o_control.version + sd_discurso(0)); }
else {
    sd_texto(ww * 0.65, hh * 0.2, 1, "v " + o_control.version); }

// imagen artistica
sd_imagen(id, 1.5);

// botones generales
sd_boton(250, 100, d_general, 6, sombreado == mm_idioma, 1.5);
sd_cuadro(ww - 500, 0, 5, 2, 1, 1);
sd_boton(ww - 100, 100, d_general, 0, sombreado == mm_cerrar, 0.9);
sd_boton(ww - 200, 100, d_general, 2, sombreado == mm_full, 0.9);
sd_boton(ww - 300, 100, d_general, 3, sombreado == mm_sonido, 0.9);
sd_boton(ww - 400, 100, d_general, 4, sombreado == mm_foto, 0.9);

// administrar servidor
sd_boton(100, 100, d_general, 5, sombreado == mm_servidor, 1.1);
sd_cuadro(ww * 0.05, hh * 0.26, 9, 2, 1, 1);
sd_boton(ww * 0.05 + 800, hh * 0.26 + 100, d_menu, 0, sombreado == mm_web, 0.9);
sd_set_texto(fa_center, fa_middle, d_letras_estilizadas);
if seleccion == mm_ip {
    var pic = "";
    if reloj_parpadeo &lt; m_parpadeo * m_seg * 0.5 {
        pic = "|"; }
    sd_texto(ww * 0.05 + 400, hh * 0.26 + 100, 0.8, o_control.servidor + pic); }
else {
    var esc = 0.8;
    if sombreado == mm_ip {
        esc += 0.1; }
    if o_control.servidor == "" {
        sd_texto(ww * 0.05 + 400, hh * 0.26 + 100, esc, sd_discurso(2)); }
    else {
        sd_texto(ww * 0.05 + 400, hh * 0.26 + 100, esc, o_control.servidor); } }

// administrar partida
sd_cuadro(ww * 0.05, hh * 0.42, 9, 7, 1, 1);
sd_set_texto(fa_right, fa_middle, d_letras_estilizadas);
sd_texto(ww * 0.05 + 850, hh * 0.42 + 100, 0.8,
    "( " + string(arch_actual) + " / " + string(arch_total) + " )");
sd_set_texto(fa_center, fa_middle, d_letras_estilizadas);
if arch_actual == 0 {
    // crear nuevo usuario
    if seleccion == mm_nombre {
        var pic = "";
        if reloj_parpadeo &lt; m_parpadeo * m_seg * 0.5 {
            pic = "|"; }
        sd_texto(ww * 0.05 + 400, hh * 0.42 + 100, 1, o_control.nombre_jugador + pic); }
    else {
        var esc = 1;
        if sombreado == mm_nombre {
            esc += 0.1; }
        if o_control.nombre_jugador == "" {
            sd_texto(ww * 0.05 + 400, hh * 0.42 + 100, esc, sd_discurso(1)); }
        else {
            sd_texto(ww * 0.05 + 400, hh * 0.42 + 100, esc, o_control.nombre_jugador); } }
    // botones administracion
    if arch_total &gt; 0 {
        sd_boton(ww * 0.05 + 150, hh * 0.42 + 180, d_menu, 1, sombreado == mm_archi_iz, 1.1);
        sd_boton(ww * 0.05 + 750, hh * 0.42 + 180, d_menu, 7, sombreado == mm_archi_de, 1.1); }
    sd_boton(ww * 0.05 + 250, hh * 0.42 + 180, d_menu, 8, sombreado == mm_ava_rand, 0.9);
    sd_boton(ww * 0.05 + 350, hh * 0.42 + 180, d_menu, 3, sombreado == mm_archi_open, 0.9);
    // escoger avatar e intro del juego
    draw_sprite_ext(d_avatar, o_control.avatar, ww * 0.05 + 200, hh * 0.42 + 350,
        0.75, 0.75, 0, c_white, 1);
    sd_boton(ww * 0.05 + 100, hh * 0.42 + 480, d_menu, 1, sombreado == mm_ava_iz, 1.1);
    sd_boton(ww * 0.05 + 300, hh * 0.42 + 480, d_menu, 7, sombreado == mm_ava_de, 1.1);
    sd_set_texto(fa_left, fa_top, d_letras_estilizadas);
    sd_parrafo(ww * 0.05 + 350, hh * 0.42 + 220, 0.75, 650, sd_discurso(3)); }
else {
    // usuario existente
    sd_texto(ww * 0.05 + 400, hh * 0.42 + 100, 1, archivo[arch_actual, 0]);
    // botones de administracion
    sd_boton(ww * 0.05 + 150, hh * 0.42 + 180, d_menu, 1, sombreado == mm_archi_iz, 1.1);
    sd_boton(ww * 0.05 + 250, hh * 0.42 + 180, d_menu, 2, sombreado == mm_archi_new, 0.9);
    sd_boton(ww * 0.05 + 350, hh * 0.42 + 180, d_menu, 3, sombreado == mm_archi_open, 0.9);
    sd_boton(ww * 0.05 + 450, hh * 0.42 + 180, d_menu, 4, sombreado == mm_archi_save, 0.9);
    sd_boton(ww * 0.05 + 550, hh * 0.42 + 180, d_menu, 5, sombreado == mm_archi_delete, 0.9);
    sd_boton(ww * 0.05 + 650, hh * 0.42 + 180, d_menu, 6, sombreado == mm_archi_history, 0.9);
    sd_boton(ww * 0.05 + 750, hh * 0.42 + 180, d_menu, 7, sombreado == mm_archi_de, 1.1);
    // estadisticas
    sd_pseudoestadisticas(ww * 0.05 + 100, hh * 0.42 + 200, real(archivo[arch_actual, 2]),
        archivo[arch_actual, 3], archivo[arch_actual, 4], archivo[arch_actual, 5],
        archivo[arch_actual, 6], archivo[arch_actual, 7]); }
// log, ayuda contextual y play
sd_set_texto(fa_left, fa_middle, d_letras_estilizadas);
if tooltip == "" {
    sd_parrafo(ww * 0.05 + 100, hh * 0.42 + 580, 0.75, 750, "log: " + loggg); }
else {
    sd_parrafo(ww * 0.05 + 100, hh * 0.42 + 580, 0.75, 750, tooltip); }
sd_boton(ww * 0.05 + 750, hh * 0.42 + 580, d_play, 0, sombreado == mm_play, 0.85);

// creditos
if sombreado == mm_univalle {
    draw_sprite_ext(d_simbolo, 1, ww - 550, 100, 0.555, 0.555, 0, c_white, 1); }
else {
    draw_sprite_ext(d_simbolo, 1, ww - 550, 100, 0.444, 0.444, 0, c_white, 1); }
sd_set_texto(fa_right, fa_middle, d_letras_estilizadas);
sd_texto(ww - 200, hh - 64, 1, "Omarsauriogames");
if sombreado == mm_omarsaurio {
    draw_sprite_ext(d_simbolo, 0, ww - 100, hh - 100, 0.777, 0.777, 0, c_white, 1); }
else {
    draw_sprite_ext(d_simbolo, 0, ww - 100, hh - 100, 0.666, 0.666, 0, c_white, 1); }

// opacar para salir o eliminar partida
if reloj_dobleclic != 0 {
    if sombreado == mm_cerrar {
        draw_set_alpha(0.333);
        draw_rectangle_colour(0, 0, ww, hh, c_black, c_black, c_black, c_black, false);
        draw_set_alpha(1); }
    else if sombreado == mm_archi_delete {
        draw_sprite_ext(d_menu, 5, ww * 0.5, hh * 0.5, 5, 5, 0, c_white, 0.333); } }

// coordenadas debug posicion
if o_control.debug {
    sd_set_texto(fa_center, fa_bottom, d_letras_consolas);
    sd_texto_c(ww * 0.5, hh, 1, c_white,
        string(mouse_x * 0.5) + "," + string(mouse_y * 0.5) + "#" +
        string((mouse_x * 0.5) / ww) + "," + string((mouse_y * 0.5) / hh)); }
// mouse
draw_sprite(d_mouse, 0, mouse_x * 0.5, mouse_y * 0.5);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
