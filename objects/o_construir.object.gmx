<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// coordenadas GUI
ww = 1024 * 2;
hh = 682 * 2;
display_set_gui_size(ww, hh);

// relojes
reloj_dobleclic = 0;
reloj_cambio = 0;

// informacion dinamica de la GUI
resalto = c_red;
sombreado = -1;
herramienta = mj_casa;
cercano = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_visible[1] = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// buscar bloque mas cercano

var escercano = noone;
var crk = 100;
var ux;
if herramienta == mj_demoler {
    with o_bloque {
        ux = point_distance(x, y, mouse_x, mouse_y);
        if estado != ms_muerto and ux &lt; crk {
            crk = ux;
            escercano = id; } } }
else if herramienta == mj_mejorar {
    with o_bloque {
        ux = point_distance(x, y, mouse_x, mouse_y);
        if estado != ms_muerto and ux &lt; crk and (tipo == mi_casa or
                tipo == mi_pozo or tipo == mi_fuerte or
                tipo == mi_templo) and planeacion == 0 {
            crk = ux;
            escercano = id; } } }
cercano = escercano;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// relojes

if reloj_dobleclic != 0 {
    reloj_dobleclic -= min(delta_time, m_dtlim);
    if reloj_dobleclic &lt; 0 {
        reloj_dobleclic = 0; } }

if reloj_cambio != 0 {
    reloj_cambio -= min(delta_time, m_dtlim);
    if reloj_cambio &lt; 0 {
        if is_array(o_control.contactos) {
            instance_create(0, 0, o_redactar); }
        else {
            instance_create(0, 0, o_turno); }
        instance_destroy(); } }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// boton sombreado

sombreado = -1;
var mox = mouse_x * 0.5;
var moy = mouse_y * 0.5;
if point_distance(mox, moy, ww - 100, 100) &lt; m_radioboton {
    sombreado = mm_cerrar; }
else if point_distance(mox, moy, ww - 200, 100) &lt; m_radioboton {
    sombreado = mm_full; }
else if point_distance(mox, moy, ww - 300, 100) &lt; m_radioboton {
    sombreado = mm_sonido; }
else if point_distance(mox, moy, ww - 400, 100) &lt; m_radioboton {
    sombreado = mm_foto; }
else if mox &gt; ww * 0.49 and mox &lt; ww * (0.49 + 0.021 * 9) and
        moy &gt; hh * 0.07 - m_radioboton and moy &lt; hh * 0.07 + m_radioboton {
    sombreado = mm_continuar; }
else {
    for (var i = 0; i &lt; 6; i++) {
        if point_distance(mox, moy, 100, hh * (0.3 + 0.1 * i)) &lt; m_radioboton * 1.4 {
            sombreado = mm_construir + i; } } }

// posicionar en el mouse
x = mouse_x;
y = mouse_y;
depth = -y;

// ver si fuera del area
if s_limite_construir(x, y) {
    resalto = c_red; }
else {
    resalto = c_white; }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// comandos clic

view_visible[1] = false;
if mouse_check_button(mb_right) or keyboard_check(vk_tab) {
    view_xview[1] = clamp(mouse_x - view_wview[1] * 0.5,
        0, room_width - view_wview[1]);
    view_yview[1] = clamp(mouse_y - view_hview[1] * 0.5,
        0, room_height - view_hview[1]);
    view_visible[1] = true; }

else if mouse_check_button_pressed(mb_left) and reloj_cambio == 0 {
    
    for (var i = 0; i &lt; 6; i++) {
        if sombreado == mm_construir + i {
            audio_play_sound(am_boton, 99, false);
            herramienta = i;
            break; } }
    
    switch sombreado {
        case mm_cerrar:
            if reloj_dobleclic == 0 {
                audio_play_sound(am_advertencia, 99, false);
                reloj_dobleclic = m_dobleclic * m_seg; }
            else {
                audio_play_sound(am_ok, 99, false);
                s_menu(); }
            break;
        
        case mm_full:
            audio_play_sound(am_boton, 99, false);
            window_set_fullscreen(!window_get_fullscreen());
            break;
        
        case mm_sonido:
            o_control.sonido++;
            if o_control.sonido &gt;= 3 {
                o_control.sonido = 0; }
            s_set_sonido();
            audio_play_sound(am_boton, 99, false);
            break;
        
        case mm_foto:
            screen_save("foto.png");
            if window_get_fullscreen() {
                audio_play_sound(am_advertencia, 99, false);
                window_set_fullscreen(false); }
            else {
                var aux = get_save_filename("PNG|*.png", "screenshot");
                if aux != "" {
                    audio_play_sound(am_foto, 99, false);
                    screen_save(aux); } }
            break;
        
        case mm_continuar:
            audio_play_sound(am_ok, 99, false);
            reloj_cambio = m_seg;
            break; }
    
    // construir como tal
    var lehizo = false;
    if si_requisitos(herramienta, 0, false) &lt;= o_control.dinero_actual {
    switch herramienta {
        case mj_casa:
            if resalto == c_white {
            if s_plazalibre(x, y, true) {
                var aux = instance_create(x, y, o_bloque);
                aux.tipo = mi_casa;
                audio_play_sound(a_construir, 99, false);
                s_history("Construyo Casa");
                lehizo = true; } }
            break;
        case mj_fuerte:
            if resalto == c_white {
            if s_plazalibre(x, y, true) {
                var aux = instance_create(x, y, o_bloque);
                aux.tipo = mi_fuerte;
                audio_play_sound(a_construir, 99, false);
                s_history("Construyo Fuerte");
                lehizo = true; } }
            break;
        case mj_pozo:
            if resalto == c_white {
            if s_plazalibre(x, y, true) {
                var aux = instance_create(x, y, o_bloque);
                aux.tipo = mi_pozo;
                audio_play_sound(a_construir, 99, false);
                s_history("Construyo Pozo");
                lehizo = true; } }
            break;
        case mj_templo:
            if resalto == c_white {
            if s_plazalibre(x, y, true) {
                var aux = instance_create(x, y, o_bloque);
                aux.tipo = mi_templo;
                audio_play_sound(a_construir, 99, false);
                s_history("Construyo Templo");
                lehizo = true; } }
            break;
        case mj_mejorar:
            if cercano != noone {
                if instance_exists(cercano) {
                    cercano.planeacion = 1;
                    audio_play_sound(a_mejora, 99, false);
                    s_history("Invirtio en mejora");
                    lehizo = true; } }
            break;
        case mj_demoler:
            if cercano != noone {
                if instance_exists(cercano) {
                    if !(cercano.tipo != mi_arbol and cercano.tipo != mi_piedra and
                            o_control.edificaciones_actual == 1) {
                        cercano.estado = ms_muerto;
                        su_saledemolicion();
                        if cercano.tipo != mi_arbol and cercano.tipo != mi_piedra {
                            audio_play_sound(a_demolision, 99, false);
                            s_history("Demolio construccion"); }
                        else {
                            if cercano.tipo == mi_arbol {
                                audio_play_sound(a_arbol, 99, false); }
                            else {
                                audio_play_sound(a_piedra, 99, false); }
                            s_history("Demolio elemento natural"); }
                        lehizo = true; } } }
            break; } }
    if lehizo {
        o_control.dinero_actual -= si_requisitos(herramienta, 0, false);
        lehizo = false;
        reloj_cambio = m_seg; } }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(mouse_check_button(mb_right) or keyboard_check(vk_tab)) {
// pinta la ficha superior izquierda con informacion del juego
sd_mis_estadisticas();

// pinta el titulo de la GUI
sd_set_texto(fa_center, fa_middle, d_letras_estilizadas);
sd_texto_c(ww * 0.57, hh * 0.13, 1, c_white, sd_discurso(19));

// botones generales
sd_cuadro(ww - 500, 0, 5, 2, 1, 1);
sd_boton(ww - 100, 100, d_general, 1, sombreado == mm_cerrar, 0.9);
sd_boton(ww - 200, 100, d_general, 2, sombreado == mm_full, 0.9);
sd_boton(ww - 300, 100, d_general, 3, sombreado == mm_sonido, 0.9);
sd_boton(ww - 400, 100, d_general, 4, sombreado == mm_foto, 0.9);

// pintar barra de ciclo o boton de continuar
draw_sprite_ext(d_ciclo, 1, ww * 0.44, hh * 0.07, 1, 1, 0, c_white, 1);
draw_sprite_ext(d_ciclo, 2, ww * 0.72, hh * 0.07, 1, 1, 0, c_white, 1);
if reloj_cambio == 0 {
    for (var i = 0; i &lt; 10; i++) {
        sd_boton(ww * (0.49 + i * 0.021), hh * 0.07, d_menu, 13, sombreado == mm_continuar, 1); } }

// dibujar tipos de envio posibles
for (var i = 0; i &lt; 6; i++) {
    if i == herramienta {
        draw_sprite_ext(d_construccion, i, 100, hh * (0.3 + 0.1 * i), 1.5, 1.5, 20, c_white, 0.666); }
    else {
        sd_boton(100, hh * (0.3 + 0.1 * i), d_construccion, i, sombreado == mm_construir + i, 1); } }

// requisitos de construccion
sd_cuadro(ww - 400, hh * 0.16, 3, 2, 1, 1);
sd_set_texto(fa_left, fa_middle, d_letras_estilizadas);
sd_texto(ww - 400 + 65, hh * 0.16 + 75, 0.8, sd_discurso(6));
draw_sprite_ext(d_estadisticas, 1, ww - 400 + 80, hh * 0.16 + 120,
    0.5, 0.5, 0, c_white, 1);
if si_requisitos(herramienta, 0, false) &lt;= o_control.dinero_actual {
    sd_texto(ww - 400 + 140, hh * 0.16 + 120, 0.8,
        string(si_requisitos(herramienta, 0, false))); }
else {
    sd_texto_c(ww - 400 + 140, hh * 0.16 + 120, 0.8, c_red,
        string(si_requisitos(herramienta, 0, false))); }

// mostrar informacion sobre la herramienta
if sombreado &gt;= mm_construir {
    sd_cuadro(ww * 0.65, hh * 0.76, 7, 3, 1, 1);
    sd_set_texto(fa_left, fa_middle, d_letras_estilizadas);
    sd_parrafo(ww * 0.65 + 80, hh * 0.76 + 150, 0.75, 750, sd_discurso(sombreado)); }

// opacar para salir al menu
if reloj_dobleclic != 0 {
    if sombreado == mm_cerrar {
        draw_set_alpha(0.333);
        draw_rectangle_colour(0, 0, ww, hh, c_black, c_black, c_black, c_black, false);
        draw_set_alpha(1); } }

// coordenadas debug posicion
if o_control.debug {
    sd_set_texto(fa_center, fa_bottom, d_letras_consolas);
    sd_texto_c(ww * 0.5, hh, 1, c_white,
        string(mouse_x * 0.5) + "," + string(mouse_y * 0.5) + "#" +
        string((mouse_x * 0.5) / ww) + "," + string((mouse_y * 0.5) / hh)); }
// mouse
draw_sprite(d_mouse, 0, mouse_x * 0.5, mouse_y * 0.5); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch herramienta {
    case mj_casa:
        draw_sprite_ext(d_casa, 0, x, y, 1, 1, 0, resalto, 0.666); break;
    case mj_pozo:
        draw_sprite_ext(d_pozo, 0, x, y, 1, 1, 0, resalto, 0.666); break;
    case mj_fuerte:
        draw_sprite_ext(d_fuerte, 0, x, y, 1, 1, 0, resalto, 0.666); break;
    case mj_templo:
        draw_sprite_ext(d_templo, 0, x, y, 1, 1, 0, resalto, 0.666); break; }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
