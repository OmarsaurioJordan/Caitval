<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// coordenadas GUI
ww = 1024 * 2;
hh = 682 * 2;
display_set_gui_size(ww, hh);

// relojes
reloj_dobleclic = 0;
reloj_cambio = 0;
reloj_ciclo = o_control.tiempo_ciclo * m_seg * si_espro(false);

// informacion dinamica de la GUI
sombreado = -1;
ver_propietario = "";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_visible[1] = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// relojes

if reloj_dobleclic != 0 {
    reloj_dobleclic -= min(delta_time, m_dtlim);
    if reloj_dobleclic &lt; 0 {
        reloj_dobleclic = 0; } }

if reloj_ciclo != 0 and o_control.estavivo {
    reloj_ciclo -= min(delta_time, m_dtlim);
    // sonido tic tac
    if !audio_is_playing(am_reloj1) and !audio_is_playing(am_reloj2) {
        if reloj_ciclo / (o_control.tiempo_ciclo * m_seg * si_espro(false)) &gt; 0.2 {
            audio_play_sound(am_reloj1, 50, false); }
        else {
            audio_play_sound(am_reloj2, 50, false); } }
    if reloj_ciclo &lt; 0 {
        reloj_ciclo = 0;
        audio_play_sound(a_dolar, 99, false); } }

if reloj_cambio != 0 and o_control.estavivo {
    reloj_cambio -= min(delta_time, m_dtlim);
    if reloj_cambio &lt; 0 {
        s_ciclo();
        instance_create(0, 0, o_construir);
        instance_destroy(); } }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// boton sombreado

sombreado = -1;
var mox = mouse_x * 0.5;
var moy = mouse_y * 0.5;
if point_distance(mox, moy, ww - 100, 100) &lt; m_radioboton {
    sombreado = mm_cerrar; }
else if point_distance(mox, moy, ww - 200, 100) &lt; m_radioboton {
    sombreado = mm_full; }
else if point_distance(mox, moy, ww - 300, 100) &lt; m_radioboton {
    sombreado = mm_sonido; }
else if point_distance(mox, moy, ww - 400, 100) &lt; m_radioboton {
    sombreado = mm_foto; }
else if mox &gt; ww * 0.49 and mox &lt; ww * (0.49 + 0.021 * 9) and
        moy &gt; hh * 0.07 - m_radioboton and moy &lt; hh * 0.07 + m_radioboton and
        reloj_cambio == 0 and reloj_ciclo == 0 {
    sombreado = mm_continuar; }
else if point_distance(mox, moy, ww * 0.92, hh * 0.2) &lt; m_radioboton {
    sombreado = mm_mnsj_upup; }
else if point_distance(mox, moy, ww * 0.96, hh * 0.2) &lt; m_radioboton {
    sombreado = mm_mnsj_up; }
else if point_distance(mox, moy, ww * 0.92, hh * 0.95) &lt; m_radioboton {
    sombreado = mm_mnsj_downdown; }
else if point_distance(mox, moy, ww * 0.96, hh * 0.95) &lt; m_radioboton {
    sombreado = mm_mnsj_down; }
else {
    if is_array(o_control.miscartas) {
        var n = 0;
        o_control.desf_mnsj = clamp(o_control.desf_mnsj, 0, array_height_2d(o_control.miscartas) - 1);
        for (var i = o_control.desf_mnsj; i &gt; max(-1, o_control.desf_mnsj - m_len_lista); i--) {
            if point_distance(mox, moy, ww * 0.94, hh * (0.25 + 0.046 * n)) &lt; m_radioboton {
                sombreado = mm_mnsj_all + i;
                break; }
            n++; } } }

// poner en esquina inferior, propietario de unidad tocada por mouse
ver_propietario = "";
var dist = mu_vision * 0.25;
var quien = noone;
var dd;
with o_unidad {
    if estado != me_muerto {
        dd = point_distance(mouse_x, mouse_y, x, y - 66);
        if dd &lt; dist {
            dist = dd;
            quien = id; } } }
if quien != noone {
    ver_propietario = quien.propietario; }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// comandos clic

// poner punto de encuentro
if mouse_check_button_pressed(mb_left) {
    var xx = o_control.x;
    var yy = o_control.y;
    var rr = o_control.r_mundo;
    var cc = o_control.c_mundo;
    var yes = true;
    if mouse_x &gt; xx + cc {
        if point_distance(mouse_x, mouse_y, xx + cc, yy) &gt; rr {
            yes = false; } }
    else if mouse_x &lt; xx - cc {
        if point_distance(mouse_x, mouse_y, xx - cc, yy) &gt; rr {
            yes = false; } }
    else if mouse_y &lt; yy - rr {
        yes = false; }
    else if mouse_y &gt; yy + rr {
        yes = false; }
    if yes and si_carta_select(sombreado) == -1 and s_plazalibre(mouse_x, mouse_y, false) {
        if instance_exists(o_pichirilo) {
            var pik = point_distance(mouse_x, mouse_y, o_pichirilo.x, o_pichirilo.y);
            with o_pichirilo { instance_destroy(); }
            if pik &gt; si_radio(mi_casa) {
                instance_create(mouse_x, mouse_y, o_pichirilo); } }
        else {
            instance_create(mouse_x, mouse_y, o_pichirilo); } } }

// mostrar zoom del mapa
view_visible[1] = false;
if mouse_check_button(mb_right) or keyboard_check(vk_tab) {
    view_xview[1] = clamp(mouse_x - view_wview[1] * 0.5,
        0, room_width - view_wview[1]);
    view_yview[1] = clamp(mouse_y - view_hview[1] * 0.5,
        0, room_height - view_hview[1]);
    view_visible[1] = true; }

// comandos de GUI
else if mouse_check_button_pressed(mb_left) and reloj_cambio == 0 {
    
    if is_array(o_control.miscartas) {
        for (var i = 0; i &lt; array_height_2d(o_control.miscartas); i++) {
            o_control.miscartas[i, 6] = false; }
        var n = 0;
        o_control.desf_mnsj = clamp(o_control.desf_mnsj, 0, array_height_2d(o_control.miscartas) - 1);
        for (var i = o_control.desf_mnsj; i &gt; max(-1, o_control.desf_mnsj - m_len_lista); i--) {
            if sombreado == mm_mnsj_all + i {
                audio_play_sound(am_boton, 99, false);
                o_control.miscartas[i, 6] = true;
                break; }
            n++; } }
    
    switch sombreado {
        case mm_cerrar:
            if reloj_dobleclic == 0 {
                audio_play_sound(am_advertencia, 99, false);
                reloj_dobleclic = m_dobleclic * m_seg; }
            else {
                audio_play_sound(am_ok, 99, false);
                s_menu(); }
            break;
        
        case mm_full:
            audio_play_sound(am_boton, 99, false);
            window_set_fullscreen(!window_get_fullscreen());
            break;
        
        case mm_sonido:
            o_control.sonido++;
            if o_control.sonido &gt;= 3 {
                o_control.sonido = 0; }
            s_set_sonido();
            audio_play_sound(am_boton, 99, false);
            break;
        
        case mm_foto:
            screen_save("foto.png");
            if window_get_fullscreen() {
                audio_play_sound(am_advertencia, 99, false);
                window_set_fullscreen(false); }
            else {
                var aux = get_save_filename("PNG|*.png", "screenshot");
                if aux != "" {
                    audio_play_sound(am_ok, 99, false);
                    screen_save(aux); } }
            break;
        
        case mm_mnsj_up:
            audio_play_sound(am_cambio, 99, false);
            o_control.desf_mnsj++;
            break;
        
        case mm_mnsj_upup:
            audio_play_sound(am_cambio, 99, false);
            o_control.desf_mnsj += 10;
            break;
        
        case mm_mnsj_down:
            audio_play_sound(am_cambio, 99, false);
            o_control.desf_mnsj--;
            break;
        
        case mm_mnsj_downdown:
            audio_play_sound(am_cambio, 99, false);
            o_control.desf_mnsj -= 10;
            break;
        
        case mm_continuar:
            audio_play_sound(am_ok, 99, false);
            reloj_cambio = m_seg;
            break; } }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(mouse_check_button(mb_right) or keyboard_check(vk_tab)) {
// pinta la ficha superior izquierda con informacion del juego
sd_mis_estadisticas();

// pinta el titulo de la GUI
sd_set_texto(fa_center, fa_middle, d_letras_estilizadas);
sd_texto_c(ww * 0.57, hh * 0.13, 1, c_white, sd_discurso(18));

// botones generales
sd_cuadro(ww - 500, 0, 5, 2, 1, 1);
sd_boton(ww - 100, 100, d_general, 1, sombreado == mm_cerrar, 0.9);
sd_boton(ww - 200, 100, d_general, 2, sombreado == mm_full, 0.9);
sd_boton(ww - 300, 100, d_general, 3, sombreado == mm_sonido, 0.9);
sd_boton(ww - 400, 100, d_general, 4, sombreado == mm_foto, 0.9);

// pintar barra de ciclo o boton de continuar
draw_sprite_ext(d_ciclo, 0, ww * 0.44, hh * 0.07, 1, 1, 0, c_white, 1);
draw_sprite_ext(d_ciclo, 1, ww * 0.72, hh * 0.07, 1, 1, 0, c_white, 1);
if reloj_cambio == 0 {
    if reloj_ciclo == 0 {
        for (var i = 0; i &lt; 10; i++) {
            sd_boton(ww * (0.49 + i * 0.021), hh * 0.07, d_menu, 13, sombreado == mm_continuar, 1); } }
    else {
        sd_barra(ww * 0.48, hh * 0.07, 5, reloj_ciclo / (o_control.tiempo_ciclo * m_seg * si_espro(false)), 1); } }

// dibujar listado de mensajes recibidos
if is_array(o_control.miscartas) {
    if array_height_2d(o_control.miscartas) &gt; m_len_lista {
        sd_boton(ww * 0.92, hh * 0.2, d_menu, 12, sombreado == mm_mnsj_upup, 1);
        sd_boton(ww * 0.96, hh * 0.2, d_menu, 11, sombreado == mm_mnsj_up, 1);
        sd_boton(ww * 0.92, hh * 0.95, d_menu, 10, sombreado == mm_mnsj_downdown, 1);
        sd_boton(ww * 0.96, hh * 0.95, d_menu, 9, sombreado == mm_mnsj_down, 1);
        o_control.desf_mnsj = clamp(o_control.desf_mnsj, m_len_lista - 1, array_height_2d(o_control.miscartas) - 1); }
    else {
        o_control.desf_mnsj = array_height_2d(o_control.miscartas) - 1; }
    draw_sprite_ext(d_menu, 2, ww * 0.99, hh * (0.25 + 0.046 * (m_len_lista - 1) *
        (1 - (o_control.desf_mnsj + 1) / array_height_2d(o_control.miscartas))),
        0.5, 0.5, 0, c_white, 1);
    var n = 0;
    for (var i = o_control.desf_mnsj; i &gt; max(-1, o_control.desf_mnsj - m_len_lista); i--) {
        if o_control.miscartas[i, 0] != -1 {
            sd_subavatar(ww * 0.94, hh * (0.25 + 0.046 * n),
                d_avatar, o_control.miscartas[i, 0], sombreado == mm_mnsj_all + i or
                o_control.miscartas[i, 6], 0.2);
            if o_control.miscartas[i, 2] == mv_semurio {
                draw_sprite_ext(d_envios, 0, ww * 0.97,
                    hh * (0.25 + 0.046 * n), 0.666, 0.666, 0, c_white, 1); }
            else {
                draw_sprite_ext(d_envios, o_control.miscartas[i, 2], ww * 0.97,
                    hh * (0.25 + 0.046 * n), 0.666, 0.666, 0, c_white, 1); } }
        else {
            sd_subavatar(ww * 0.94, hh * (0.25 + 0.046 * n),
                d_menu, 14, sombreado == mm_mnsj_all + i or
                o_control.miscartas[i, 6], 0.75); }
        n++; } }

// dibujar carta abierta
if is_array(o_control.miscartas) {
    var aux = si_carta_select(sombreado);
    if aux &gt; -1 {
        sd_carta_abierta(ww * 0.45, hh * 0.25,
            o_control.miscartas[aux, 0], o_control.miscartas[aux, 1],
            o_control.miscartas[aux, 2], o_control.miscartas[aux, 3],
            o_control.miscartas[aux, 4], o_control.miscartas[aux, 5]); } }

// nombre de propietario de unidad sombreada
sd_set_texto(fa_left, fa_bottom, d_letras_estilizadas);
sd_texto_c(20, hh - 10, 1, c_white, ver_propietario);

// ver informacion de numero de jugadores
sd_set_texto(fa_left, fa_middle, d_letras_estilizadas);
draw_sprite(d_general, 8, ww * 0.03, hh * 0.27);
if is_array(o_control.contactos) {
    sd_texto_c(ww * 0.06, hh * 0.27, 1, c_white,
        string(array_height_2d(o_control.contactos))); }
else {
    sd_texto_c(ww * 0.06, hh * 0.27, 1, c_white, "0"); }
// ver informacion de menor de edad
if o_control.ciclo_edad &lt; o_control.menor {
    draw_sprite(d_general, 7, ww * 0.03, hh * 0.35);
    sd_texto_c(ww * 0.06, hh * 0.35, 1, c_white,
        string(o_control.menor - o_control.ciclo_edad)); }

// opacar para salir al menu
if reloj_dobleclic != 0 {
    if sombreado == mm_cerrar {
        draw_set_alpha(0.333);
        draw_rectangle_colour(0, 0, ww, hh, c_black, c_black, c_black, c_black, false);
        draw_set_alpha(1); } }

// coordenadas debug posicion
if o_control.debug {
    sd_set_texto(fa_center, fa_bottom, d_letras_consolas);
    sd_texto_c(ww * 0.5, hh, 1, c_white,
        string(mouse_x * 0.5) + "," + string(mouse_y * 0.5) + "#" +
        string((mouse_x * 0.5) / ww) + "," + string((mouse_y * 0.5) / hh)); }
// mouse
draw_sprite(d_mouse, 0, mouse_x * 0.5, mouse_y * 0.5); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
