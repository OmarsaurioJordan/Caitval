<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// datos de la unidad
propietario = o_control.nombre_jugador;
retorno = propietario;
estado = me_andar;
tipo = mt_ciudadano;
item = ""; //E:escudo, G:gorro, T:traje
vida = mu_vida;
intentos = 0;
saldo = 0;
actuar = 0;

// variables dinamicas
metax = x;
metay = y;
blancox = x;
blancoy = y;

// temporizadores
reloj_anima = random(m_seg);
reloj_golpe = 0;
reloj_andar = random(m_seg);
reloj_trepar = random(m_seg);
reloj_mision = 0;
reloj_ataque = random(m_seg);
reloj_discurso = random(m_seg);
reloj_vida = random(m_seg);
reloj_actuar = random(m_seg);
reloj_guarecido = 0;
reloj_final = mu_cae * m_seg;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// relojes

if estado != me_muerto {
    // animacion de andar
    reloj_anima -= min(delta_time, m_dtlim);
    if reloj_anima &lt;= 0 {
        reloj_anima = mu_anima * m_seg; }
    
    // animacion de golpe o shock
    if reloj_golpe != 0 {
        reloj_golpe -= min(delta_time, m_dtlim);
        if reloj_golpe &lt; 0 {
            reloj_golpe = 0; } }
    
    // cada cuanto buscar un nuevo punto a ir
    reloj_andar -= min(delta_time, m_dtlim);
    if reloj_andar &lt;= 0 {
        reloj_andar = (mu_redirigir + random(mu_redirigir)) * m_seg;
        if tipo == mt_fugado {
            estado = me_retirada; }
        su_busca_bloque(id);
        if tipo == mt_ciudadano or tipo == mt_turista {
            su_trabaja(id);
            if o_control.gente_actual &gt; o_control.gente_soporte and
                    irandom(1) &lt; m_probchao {
                tipo = mt_fugado;
                item = "";
                saldo = 0;
                estado = me_retirada;
                audio_play_sound(a_mevoy, 16, false); } } }
    
    // valores mayores a la mitad hara traspasar arboles y piedras
    reloj_trepar -= min(delta_time, m_dtlim);
    if reloj_trepar &lt;= 0 {
        reloj_trepar = mu_trepar * m_seg; }
    
    // tiempo para completar alguna tarea
    if reloj_mision != 0 {
        reloj_mision -= min(delta_time, m_dtlim);
        if reloj_mision &lt; 0 {
            reloj_mision = 0;
            estado = me_retirada; } }
    
    // tiempo para salir de la guarida
    if reloj_guarecido != 0 {
        reloj_guarecido -= min(delta_time, m_dtlim);
        if reloj_guarecido &lt;= 0 {
            reloj_guarecido = 0;
            if estado == me_guarecido {
                var mib = si_mibloque(id);
                if mib != noone {
                    su_liberabloque(id);
                    var aux = si_radio(mib.tipo) + mu_radio;
                    var dd = random(360);
                    x += lengthdir_x(aux, dd);
                    y += lengthdir_y(aux, dd);
                    if mib.generar &gt; 0 {
                        mib.generar--;
                        audio_play_sound(a_nace, 60, false);
                        su_unidad(x, y, "", mt_ciudadano, "", 0, 0, 0, 0); } }
                estado = me_andar; } } }
    
    // golpeara a algun blanco cercano
    reloj_ataque -= min(delta_time, m_dtlim);
    if reloj_ataque &lt;= 0 {
        reloj_ataque = (mu_ataque + random(mu_ataque)) * m_seg;
        if !su_ataque(id) {
            su_disparo(id); } }
    
    // convencera a algun blanco cercano
    reloj_discurso -= min(delta_time, m_dtlim);
    if reloj_discurso &lt;= 0 {
        reloj_discurso = (mu_discurso + random(mu_discurso)) * m_seg;
        if !su_discurso(id) {
            su_compra(id); } }
    
    // regenerar los puntos de vida
    reloj_vida -= min(delta_time, m_dtlim);
    if reloj_vida &lt;= 0 {
        reloj_vida = mu_regenera * m_seg;
        if vida &lt; mu_vida and tipo != mt_titan {
            if random(1) &lt; m_soniazar {
                audio_play_sound(a_curacion, 20, false); }
            vida++; } }
    
    // cambiar predisposicion a actuar o huir
    reloj_actuar -= min(delta_time, m_dtlim);
    if reloj_actuar &lt;= 0 {
        reloj_actuar = (mu_actuar + random(mu_actuar)) * m_seg;
        su_actuar_o_huir(id); } }

// animacion de morir
else {
    reloj_final -= min(delta_time, m_dtlim);
    if reloj_final &lt;= -m_cadaver * m_seg {
        instance_destroy(); } }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IA

if estado != me_muerto
{
    // percepcion del entorno
    if estado == me_andar or estado == me_objetivo {
        var subord = true;
        if instance_exists(o_pichirilo) and tipo == mt_ciudadano {
            if point_distance(x, y, o_pichirilo.x, o_pichirilo.y) &gt; si_radio(mi_casa) {
                metax = o_pichirilo.x;
                metay = o_pichirilo.y;
                estado = me_andar;
                subord = false; } }
        if subord {
            if !su_fijar_ataque(id) {
                if !su_fijar_discurso(id) {
                    if !su_fijar_compra(id) {
                        su_fijar_mision(id); } } } } }
    
    // depurar maquina de estados para movimiento
    switch estado {
        case me_andar:
            su_movimiento(id, metax, metay);
            break;
        case me_retirada:
            var nave = su_minave(id);
            if su_movimiento(id, blancox, blancoy) {
                if tipo == mt_fugado {
                    nave.sonturistas++; }
                else {
                    nave.unidades++; }
                nave.dinero += saldo;
                if tipo == mt_espia {
                    nave.reloj_vuelo = m_seg;
                    nave.mensaje = sh_espionaje(); }
                instance_destroy();
                exit; }
            break;
        case me_objetivo:
            if su_movimiento(id, blancox, blancoy) {
                switch tipo {
                    case mt_vendedor:
                        if saldo &gt; 0 {
                            o_control.dinero_actual = min(o_control.dinero_actual +
                                saldo * m_dinero_interes, m_dolar * si_productores() * 6);
                            s_deuda(saldo, propietario);
                            saldo = 0; }
                        estado = me_retirada;
                        break;
                    case mt_regalo:
                        if saldo &gt; 0 {
                            o_control.dinero_actual = min(o_control.dinero_actual +
                                saldo, m_dolar * si_productores() * 6);
                            s_pago(saldo);
                            saldo = 0; }
                        if propietario == o_control.nombre_jugador {
                            estado = me_andar;
                            tipo = mt_ciudadano; }
                        else {
                            estado = me_retirada; }
                        break;
                    case mt_ladron:
                        saldo = min(o_control.dinero_actual, ceil(m_dolar * 0.5));
                        o_control.dinero_actual -= saldo;
                        estado = me_retirada;
                        break;
                    case mt_ingeniero:
                        var aux = su_base_mira(id, false);
                        if aux != noone {
                            if point_distance(x, y, aux.x, aux.y) &lt; si_radio(aux.tipo) +
                                    mu_radio * 2 {
                                aux.planeacion = 0;
                                aux.estado = ms_remodelando;
                                audio_play_sound(a_mejora, 80, false);
                                s_history("Mejora realizada");
                                tipo = mt_regalo;
                                saldo = 0;
                                estado = me_retirada; }
                            else {
                                estado = me_andar; } }
                        else {
                            estado = me_andar; }
                        break;
                    case mt_asedio:
                        var aux = su_base_mira(id, true);
                        if aux != noone {
                            if point_distance(x, y, aux.x, aux.y) &lt; si_radio(aux.tipo) +
                                    mu_radio * 2 {
                                s_explosion(aux, x, y + 1); }
                            else {
                                estado = me_andar; } }
                        else {
                            estado = me_andar; }
                        break;
                    case mt_turista:
                    case mt_ciudadano:
                        if actuar == 0 {
                            var mib = su_base_cerca(id);
                            if mib != noone {
                                if point_distance(x, y, mib.x, mib.y) &lt; si_radio(mib.tipo) +
                                        mu_radio * 2 {
                                    x = mib.x;
                                    y = mib.y;
                                    mib.guarecidos++;
                                    reloj_guarecido = (mu_guarecido + random(mu_guarecido)) * m_seg;
                                    estado = me_guarecido; }
                                else {
                                    estado = me_andar; } }
                            else {
                                estado = me_andar; } }
                        else {
                            estado = me_andar; }
                        break;
                    default:
                        estado = me_andar;
                        break; } }
            break; }
    
    // prevenir escape y actualizar profundidad
    s_limite_mundo(id);
    depth = -y;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if estado != me_guarecido and reloj_final &gt; 0 {
    var ccc = c_white;
    if reloj_golpe != 0 and estado != me_muerto {
        ccc = merge_colour(c_white, c_shock, reloj_golpe / (mu_shock * m_seg)); }
    var paso = 0;
    if estado == me_muerto {
        var ff = ceil(reloj_final / (0.2 * mu_cae * m_seg));
        if ff &lt; 5 { paso = 7 - ff; } }
    else if x != xprevious or y != yprevious {
        var ff = ceil(reloj_anima / (0.25 * mu_anima * m_seg));
        if ff == 2 { paso = 1; } else if ff == 4 { paso = 2; } }
    switch tipo {
        case mt_titan: draw_sprite_ext(d_titan, paso, x, y, 1, 1, 0, ccc, 1); break;
        case mt_gigante:
            var resiz = (1 + m_siz) * 0.5;
            draw_sprite_ext(d_gigante, paso, x, y, resiz, resiz, 0, ccc, 1); break;
        case mt_salvaje: draw_sprite_ext(d_salvaje, paso, x, y, m_siz, m_siz, 0, ccc, 1); break;
        case mt_vendedor:
            if saldo &gt; 0 {
                if string_count("T", item) == 0 { draw_sprite_ext(d_vendedor, paso + 14, x, y, m_siz, m_siz, 0, ccc, 1); }
                else { draw_sprite_ext(d_vendedor, paso, x, y, m_siz, m_siz, 0, ccc, 1); } }
            else {
                if string_count("T", item) == 0 { draw_sprite_ext(d_vendedor, paso + 21, x, y, m_siz, m_siz, 0, ccc, 1); }
                else { draw_sprite_ext(d_vendedor, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); } } break;
        case mt_regalo:
            if saldo &gt; 0 { draw_sprite_ext(d_regalo, paso, x, y, m_siz, m_siz, 0, ccc, 1); }
            else { draw_sprite_ext(d_regalo, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); } break;
        case mt_sabio:
            if string_count("G", item) == 0 { draw_sprite_ext(d_sabio, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); }
            else { draw_sprite_ext(d_sabio, paso, x, y, m_siz, m_siz, 0, ccc, 1); } break;
        case mt_ingeniero: draw_sprite_ext(d_ingeniero, paso, x, y, m_siz, m_siz, 0, ccc, 1); break;
        case mt_cartero: draw_sprite_ext(d_cartero, paso, x, y, m_siz, m_siz, 0, ccc, 1); break;
        case mt_fugado: draw_sprite_ext(d_fugado, paso, x, y, m_siz, m_siz, 0, ccc, 1); break;
        case mt_defensa:
            if string_count("E", item) == 0 { draw_sprite_ext(d_defensa, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); }
            else { draw_sprite_ext(d_defensa, paso, x, y, m_siz, m_siz, 0, ccc, 1); } break;
        case mt_asedio: draw_sprite_ext(d_asedio, paso, x, y, m_siz, m_siz, 0, ccc, 1); break;
        case mt_invasor:
            if string_count("E", item) == 0 { draw_sprite_ext(d_invasor, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); }
            else { draw_sprite_ext(d_invasor, paso, x, y, m_siz, m_siz, 0, ccc, 1); } break;
        case mt_ladron:
            if saldo &gt; 0 { draw_sprite_ext(d_ladron, paso, x, y, m_siz, m_siz, 0, ccc, 1); }
            else { draw_sprite_ext(d_ladron, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); } break;
        case mt_espia: draw_sprite_ext(d_espia, paso, x, y, m_siz, m_siz, 0, ccc, 1); break;
        case mt_turista:
            if string_count("E", item) == 0 {
                if string_count("T", item) == 0 {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_turista, paso + 49, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_turista, paso + 42, x, y, m_siz, m_siz, 0, ccc, 1); } }
                else {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_turista, paso + 21, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_turista, paso + 14, x, y, m_siz, m_siz, 0, ccc, 1); } } }
            else {
                if string_count("T", item) == 0 {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_turista, paso + 35, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_turista, paso + 28, x, y, m_siz, m_siz, 0, ccc, 1); } }
                else {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_turista, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_turista, paso, x, y, m_siz, m_siz, 0, ccc, 1); } } } break;
        case mt_ciudadano:
            if string_count("E", item) == 0 {
                if string_count("T", item) == 0 {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_ciudadano, paso + 49, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_ciudadano, paso + 42, x, y, m_siz, m_siz, 0, ccc, 1); } }
                else {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_ciudadano, paso + 21, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_ciudadano, paso + 14, x, y, m_siz, m_siz, 0, ccc, 1); } } }
            else {
                if string_count("T", item) == 0 {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_ciudadano, paso + 35, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_ciudadano, paso + 28, x, y, m_siz, m_siz, 0, ccc, 1); } }
                else {
                    if string_count("G", item) == 0 {
                        draw_sprite_ext(d_ciudadano, paso + 7, x, y, m_siz, m_siz, 0, ccc, 1); }
                    else {
                        draw_sprite_ext(d_ciudadano, paso, x, y, m_siz, m_siz, 0, ccc, 1); } } } break; }
    
    if o_control.debug {
        sd_set_texto(fa_center, fa_bottom, d_letras_consolas);
        sd_texto_c(x, y - 80, 1, c_white,
            "$" + string(saldo) + "#!" + string(intentos) + "#+" + string(vida)); } }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
