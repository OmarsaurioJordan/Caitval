<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reloj_anima = random(m_seg);
reloj_existencia = mpy_reloj * m_seg;
direction = random(360);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dinamismo

// animacion girar
reloj_anima -= min(delta_time, m_dtlim);
if reloj_anima &lt;= 0 {
    reloj_anima = mu_anima * m_seg * 0.5; }

// rebote con bloques
var my = id;
with o_bloque {
    if estado != ms_muerto and point_distance(x, y, my.x, my.y) &lt; si_radio(tipo) {
        my.direction = point_direction(x, y, my.x, my.y);
        audio_play_sound(a_proyrebote, 10, false);
        break; } }

// movimiento
x += lengthdir_x(mpy_vel * min(delta_time, m_dtlim), direction); 
y += lengthdir_y(mpy_vel * min(delta_time, m_dtlim), direction);
depth = -y;

// impacto a unidad enemiga
var xxx = false;
with o_unidad {
    if estado != me_muerto and si_enemigo(tipo) {
        if point_distance(x, y, my.x, my.y) &lt; mu_radio * 2 {
            su_golpe(id, 1);
            if vida == 0 {
                su_morir(id); }
            else if vida &lt;= mu_vida * 0.2 and (tipo == mt_invasor or
                    tipo == mt_defensa) {
                estado = me_retirada; }
            xxx = true;
            break; } } }
if xxx {
    instance_destroy();
    exit; }

// temporizador de destruirse
reloj_existencia -= min(delta_time, m_dtlim);
if reloj_existencia &lt;= 0 {
    instance_destroy(); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var paso = floor(reloj_anima / (0.25 * mu_anima * m_seg * 0.5));
draw_sprite_ext(d_proyectil, paso, x, y - 110, m_siz, m_siz, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
