<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// informacion de la recepcion en espera
tipo = 0;
emisor = "";
cantidad = 0;
limitepro = 0;
dinero = 0;
texto = "";
reloj_manifestacion = random(mh_ciclo * m_seg);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// manifestacion
reloj_manifestacion -= min(delta_time, m_dtlim);
if reloj_manifestacion &lt;= 0 {
    if emisor != "" {
        o_control.recepciones_bien += si_envirecep_biengen(tipo, true);
        o_control.recepciones_totales += si_envirecep_biengen(tipo, false);
        s_agregar_relacion(emisor, 1, si_envirecep_biengen(tipo, true),
            si_envirecep_biengen(tipo, false));
        s_agregarcarta(si_suavatar(emisor, -1), emisor, tipo, cantidad, texto); }
    if tipo == mv_informe {
        s_agregarcarta(-1, "", tipo, cantidad, sd_espionaje(texto)); }
    s_audio_envios(tipo);
    switch tipo {
        case mv_retorno:
            var ddd = dinero;
            repeat cantidad {
                if clamp(ddd, 0, m_dolar) == 0 {
                    su_unidad(x, y, "", mt_ciudadano, "", 0, 0, 0, 0); }
                else {
                    su_unidad(x, y, "", mt_regalo, "", 0, 0, clamp(ddd, 0, m_dolar), 0); 
                    ddd -= m_dolar; } }
            var xua;
            repeat limitepro {
                xua = su_unidad(x, y, texto, mt_turista, "", 0, 0, 0, 0);
                xua.retorno = o_control.nombre_jugador; }
            break;
        case mv_informe:
            su_unidad(x, y, "", mt_ciudadano, "", 0, 0, 0, 0);
            break;
        case mv_carta:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_cartero, "", 0, 0, 0, 30); }
            break;
        case mv_invasion:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_invasor, "E", limitepro, 0, 0, mu_mision); }
            break;
        case mv_defensa:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_defensa, "E", limitepro, 0, 0, mu_mision); }
            break;
        case mv_asedio:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_asedio, "", 0, 0, 0, mu_mision * 10); }
            break;
        case mv_regalo:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_regalo, "", 0, 0, dinero / cantidad, mu_mision * 10); }
            break;
        case mv_venta:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_vendedor, "T", limitepro, 0, dinero /
                    cantidad, mu_mision * 10); }
            break;
        case mv_robo:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_ladron, "", 0, 0, 0, mu_mision * 10); }
            break;
        case mv_migrantes:
            var xua;
            repeat cantidad {
                xua = su_unidad(x, y, emisor, mt_turista, "", 0, 0, 0, 0);
                xua.retorno = o_control.nombre_jugador; }
            break;
        case mv_persuacion:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_sabio, "G", limitepro, mu_intentos,
                    0, mu_mision); }
            break;
        case mv_espionaje:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_espia, "", 0, 0, 0, 30); }
            break;
        case mv_colaboracion:
            repeat cantidad {
                su_unidad(x, y, emisor, mt_ingeniero, "", 0, 0, 0, mu_mision * 60); }
            break;
        case mv_monsters:
            s_history("Llegan monstruos");
            var xua;
            repeat cantidad {
                xua = su_unidad(x, y, emisor, mt_salvaje, "", 0, 0, 0, mu_mision);
                xua.propietario = "";
                xua.retorno = "";
                if !audio_is_playing(av_salvaje) {
                    audio_play_sound(av_salvaje, 69, false); } }
            repeat limitepro {
                xua = su_unidad(x, y, emisor, mt_gigante, "", 0, 0, 0, mu_mision);
                xua.propietario = "";
                xua.retorno = "";
                if !audio_is_playing(av_gigante) {
                    audio_play_sound(av_gigante, 69, false); } }
            repeat dinero {
                xua = su_unidad(x, y, emisor, mt_titan, "", 0, 0, 0, mu_mision);
                xua.propietario = "";
                xua.retorno = "";
                xua.actuar = 1;
                if !audio_is_playing(av_titan) {
                    audio_play_sound(av_titan, 69, false); } }
            break; }
    if emisor != "" {
        s_history(emisor + " -&gt; " + string(cantidad) + " " + sd_name_envio(tipo)); }
    instance_destroy(); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
