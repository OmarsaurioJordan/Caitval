<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// temporizadores
reloj_anima = random(m_seg);
reloj_levita = random(m_seg);
levita = 5 + random(15);
reloj_cambio = (m_mosco + random(m_mosco)) * m_seg;

mueve = choose(true, false);
direction = random(360);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IA

// animacion volar
reloj_anima -= min(delta_time, m_dtlim);
if reloj_anima &lt;= 0 {
    reloj_anima = mu_anima * m_seg; }
reloj_levita -= min(delta_time, m_dtlim);
if reloj_levita &lt;= 0 {
    reloj_levita = mu_anima * m_seg * levita; }

// temporizador de cambio de movimiento
reloj_cambio -= min(delta_time, m_dtlim);
if reloj_cambio &lt;= 0 {
    reloj_cambio = (m_mosco + random(m_mosco)) * m_seg;
    if mueve {
        mueve = choose(true, true, true, false);
        direction += random(60) - 30; }
    else {
        mueve = choose(true, false, false, false);
        direction = random(360); }
    if random(1) &lt; 0.1 {
        levita = 5 + random(15); } }

// movimiento como tal
if mueve {
    x += lengthdir_x(mu_velocidad * min(delta_time, m_dtlim), direction); 
    y += lengthdir_y(mu_velocidad * min(delta_time, m_dtlim), direction); }

// prevenir escape y actualizar profundidad
var xx = x;
var yy = y;
s_limite_mundo(id);
if xx != x or yy != y {
    direction = random(360); }
depth = -y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var paso = 0;
var ff = ceil(reloj_anima / (0.25 * mu_anima * m_seg));
if ff == 2 { paso = 1; } else if ff == 4 { paso = 2; }

ff = reloj_levita / (mu_anima * m_seg * levita);
var tll = 30 + sin(ff * 2 * pi) * 30;

var des, inv;
var ddd = s_direccion_sprite(direction);
if ddd == 0 or ddd == 4 { des = 3; inv = 1; }
else if ddd == 2 or ddd == 6 { des = 6; inv = 1; }
else if ddd == 1 or ddd == 5 { des = 0; inv = -1; }
else { des = 0; inv = 1; }

draw_sprite_ext(d_insecto, des + paso, x, y + tll, inv * m_siz, m_siz, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
